// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/jijimama/newspaper-app/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jijimama/newspaper-app/ent/article"
	"github.com/jijimama/newspaper-app/ent/column"
	"github.com/jijimama/newspaper-app/ent/newspaper"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Article is the client for interacting with the Article builders.
	Article *ArticleClient
	// Column is the client for interacting with the Column builders.
	Column *ColumnClient
	// Newspaper is the client for interacting with the Newspaper builders.
	Newspaper *NewspaperClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Article = NewArticleClient(c.config)
	c.Column = NewColumnClient(c.config)
	c.Newspaper = NewNewspaperClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Article:   NewArticleClient(cfg),
		Column:    NewColumnClient(cfg),
		Newspaper: NewNewspaperClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Article:   NewArticleClient(cfg),
		Column:    NewColumnClient(cfg),
		Newspaper: NewNewspaperClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Article.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Article.Use(hooks...)
	c.Column.Use(hooks...)
	c.Newspaper.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Article.Intercept(interceptors...)
	c.Column.Intercept(interceptors...)
	c.Newspaper.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArticleMutation:
		return c.Article.mutate(ctx, m)
	case *ColumnMutation:
		return c.Column.mutate(ctx, m)
	case *NewspaperMutation:
		return c.Newspaper.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArticleClient is a client for the Article schema.
type ArticleClient struct {
	config
}

// NewArticleClient returns a client for the Article from the given config.
func NewArticleClient(c config) *ArticleClient {
	return &ArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `article.Hooks(f(g(h())))`.
func (c *ArticleClient) Use(hooks ...Hook) {
	c.hooks.Article = append(c.hooks.Article, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `article.Intercept(f(g(h())))`.
func (c *ArticleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Article = append(c.inters.Article, interceptors...)
}

// Create returns a builder for creating a Article entity.
func (c *ArticleClient) Create() *ArticleCreate {
	mutation := newArticleMutation(c.config, OpCreate)
	return &ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Article entities.
func (c *ArticleClient) CreateBulk(builders ...*ArticleCreate) *ArticleCreateBulk {
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleClient) MapCreateBulk(slice any, setFunc func(*ArticleCreate, int)) *ArticleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleCreateBulk{err: fmt.Errorf("calling to ArticleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Article.
func (c *ArticleClient) Update() *ArticleUpdate {
	mutation := newArticleMutation(c.config, OpUpdate)
	return &ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleClient) UpdateOne(a *Article) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticle(a))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleClient) UpdateOneID(id int) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticleID(id))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Article.
func (c *ArticleClient) Delete() *ArticleDelete {
	mutation := newArticleMutation(c.config, OpDelete)
	return &ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleClient) DeleteOne(a *Article) *ArticleDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleClient) DeleteOneID(id int) *ArticleDeleteOne {
	builder := c.Delete().Where(article.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleDeleteOne{builder}
}

// Query returns a query builder for Article.
func (c *ArticleClient) Query() *ArticleQuery {
	return &ArticleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticle},
		inters: c.Interceptors(),
	}
}

// Get returns a Article entity by its id.
func (c *ArticleClient) Get(ctx context.Context, id int) (*Article, error) {
	return c.Query().Where(article.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleClient) GetX(ctx context.Context, id int) *Article {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryColumn queries the column edge of a Article.
func (c *ArticleClient) QueryColumn(a *Article) *ColumnQuery {
	query := (&ColumnClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(column.Table, column.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, article.ColumnTable, article.ColumnColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleClient) Hooks() []Hook {
	return c.hooks.Article
}

// Interceptors returns the client interceptors.
func (c *ArticleClient) Interceptors() []Interceptor {
	return c.inters.Article
}

func (c *ArticleClient) mutate(ctx context.Context, m *ArticleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Article mutation op: %q", m.Op())
	}
}

// ColumnClient is a client for the Column schema.
type ColumnClient struct {
	config
}

// NewColumnClient returns a client for the Column from the given config.
func NewColumnClient(c config) *ColumnClient {
	return &ColumnClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `column.Hooks(f(g(h())))`.
func (c *ColumnClient) Use(hooks ...Hook) {
	c.hooks.Column = append(c.hooks.Column, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `column.Intercept(f(g(h())))`.
func (c *ColumnClient) Intercept(interceptors ...Interceptor) {
	c.inters.Column = append(c.inters.Column, interceptors...)
}

// Create returns a builder for creating a Column entity.
func (c *ColumnClient) Create() *ColumnCreate {
	mutation := newColumnMutation(c.config, OpCreate)
	return &ColumnCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Column entities.
func (c *ColumnClient) CreateBulk(builders ...*ColumnCreate) *ColumnCreateBulk {
	return &ColumnCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ColumnClient) MapCreateBulk(slice any, setFunc func(*ColumnCreate, int)) *ColumnCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ColumnCreateBulk{err: fmt.Errorf("calling to ColumnClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ColumnCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ColumnCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Column.
func (c *ColumnClient) Update() *ColumnUpdate {
	mutation := newColumnMutation(c.config, OpUpdate)
	return &ColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ColumnClient) UpdateOne(co *Column) *ColumnUpdateOne {
	mutation := newColumnMutation(c.config, OpUpdateOne, withColumn(co))
	return &ColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ColumnClient) UpdateOneID(id int) *ColumnUpdateOne {
	mutation := newColumnMutation(c.config, OpUpdateOne, withColumnID(id))
	return &ColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Column.
func (c *ColumnClient) Delete() *ColumnDelete {
	mutation := newColumnMutation(c.config, OpDelete)
	return &ColumnDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ColumnClient) DeleteOne(co *Column) *ColumnDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ColumnClient) DeleteOneID(id int) *ColumnDeleteOne {
	builder := c.Delete().Where(column.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ColumnDeleteOne{builder}
}

// Query returns a query builder for Column.
func (c *ColumnClient) Query() *ColumnQuery {
	return &ColumnQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeColumn},
		inters: c.Interceptors(),
	}
}

// Get returns a Column entity by its id.
func (c *ColumnClient) Get(ctx context.Context, id int) (*Column, error) {
	return c.Query().Where(column.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ColumnClient) GetX(ctx context.Context, id int) *Column {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNewspaper queries the newspaper edge of a Column.
func (c *ColumnClient) QueryNewspaper(co *Column) *NewspaperQuery {
	query := (&NewspaperClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(column.Table, column.FieldID, id),
			sqlgraph.To(newspaper.Table, newspaper.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, column.NewspaperTable, column.NewspaperColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryArticles queries the articles edge of a Column.
func (c *ColumnClient) QueryArticles(co *Column) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(column.Table, column.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, column.ArticlesTable, column.ArticlesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ColumnClient) Hooks() []Hook {
	return c.hooks.Column
}

// Interceptors returns the client interceptors.
func (c *ColumnClient) Interceptors() []Interceptor {
	return c.inters.Column
}

func (c *ColumnClient) mutate(ctx context.Context, m *ColumnMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ColumnCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ColumnUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ColumnUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ColumnDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Column mutation op: %q", m.Op())
	}
}

// NewspaperClient is a client for the Newspaper schema.
type NewspaperClient struct {
	config
}

// NewNewspaperClient returns a client for the Newspaper from the given config.
func NewNewspaperClient(c config) *NewspaperClient {
	return &NewspaperClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `newspaper.Hooks(f(g(h())))`.
func (c *NewspaperClient) Use(hooks ...Hook) {
	c.hooks.Newspaper = append(c.hooks.Newspaper, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `newspaper.Intercept(f(g(h())))`.
func (c *NewspaperClient) Intercept(interceptors ...Interceptor) {
	c.inters.Newspaper = append(c.inters.Newspaper, interceptors...)
}

// Create returns a builder for creating a Newspaper entity.
func (c *NewspaperClient) Create() *NewspaperCreate {
	mutation := newNewspaperMutation(c.config, OpCreate)
	return &NewspaperCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Newspaper entities.
func (c *NewspaperClient) CreateBulk(builders ...*NewspaperCreate) *NewspaperCreateBulk {
	return &NewspaperCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NewspaperClient) MapCreateBulk(slice any, setFunc func(*NewspaperCreate, int)) *NewspaperCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NewspaperCreateBulk{err: fmt.Errorf("calling to NewspaperClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NewspaperCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NewspaperCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Newspaper.
func (c *NewspaperClient) Update() *NewspaperUpdate {
	mutation := newNewspaperMutation(c.config, OpUpdate)
	return &NewspaperUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewspaperClient) UpdateOne(n *Newspaper) *NewspaperUpdateOne {
	mutation := newNewspaperMutation(c.config, OpUpdateOne, withNewspaper(n))
	return &NewspaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewspaperClient) UpdateOneID(id int) *NewspaperUpdateOne {
	mutation := newNewspaperMutation(c.config, OpUpdateOne, withNewspaperID(id))
	return &NewspaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Newspaper.
func (c *NewspaperClient) Delete() *NewspaperDelete {
	mutation := newNewspaperMutation(c.config, OpDelete)
	return &NewspaperDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NewspaperClient) DeleteOne(n *Newspaper) *NewspaperDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NewspaperClient) DeleteOneID(id int) *NewspaperDeleteOne {
	builder := c.Delete().Where(newspaper.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewspaperDeleteOne{builder}
}

// Query returns a query builder for Newspaper.
func (c *NewspaperClient) Query() *NewspaperQuery {
	return &NewspaperQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNewspaper},
		inters: c.Interceptors(),
	}
}

// Get returns a Newspaper entity by its id.
func (c *NewspaperClient) Get(ctx context.Context, id int) (*Newspaper, error) {
	return c.Query().Where(newspaper.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewspaperClient) GetX(ctx context.Context, id int) *Newspaper {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryColumns queries the columns edge of a Newspaper.
func (c *NewspaperClient) QueryColumns(n *Newspaper) *ColumnQuery {
	query := (&ColumnClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(newspaper.Table, newspaper.FieldID, id),
			sqlgraph.To(column.Table, column.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, newspaper.ColumnsTable, newspaper.ColumnsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NewspaperClient) Hooks() []Hook {
	return c.hooks.Newspaper
}

// Interceptors returns the client interceptors.
func (c *NewspaperClient) Interceptors() []Interceptor {
	return c.inters.Newspaper
}

func (c *NewspaperClient) mutate(ctx context.Context, m *NewspaperMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NewspaperCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NewspaperUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NewspaperUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NewspaperDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Newspaper mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Article, Column, Newspaper []ent.Hook
	}
	inters struct {
		Article, Column, Newspaper []ent.Interceptor
	}
)

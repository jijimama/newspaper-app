// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jijimama/newspaper-app/ent/column"
	"github.com/jijimama/newspaper-app/ent/newspaper"
)

// Column is the model entity for the Column schema.
type Column struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ColumnQuery when eager-loading is set.
	Edges             ColumnEdges `json:"edges"`
	newspaper_columns *int
	selectValues      sql.SelectValues
}

// ColumnEdges holds the relations/edges for other nodes in the graph.
type ColumnEdges struct {
	// Newspaper holds the value of the newspaper edge.
	Newspaper *Newspaper `json:"newspaper,omitempty"`
	// Articles holds the value of the articles edge.
	Articles []*Article `json:"articles,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NewspaperOrErr returns the Newspaper value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ColumnEdges) NewspaperOrErr() (*Newspaper, error) {
	if e.Newspaper != nil {
		return e.Newspaper, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: newspaper.Label}
	}
	return nil, &NotLoadedError{edge: "newspaper"}
}

// ArticlesOrErr returns the Articles value or an error if the edge
// was not loaded in eager-loading.
func (e ColumnEdges) ArticlesOrErr() ([]*Article, error) {
	if e.loadedTypes[1] {
		return e.Articles, nil
	}
	return nil, &NotLoadedError{edge: "articles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Column) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case column.FieldID:
			values[i] = new(sql.NullInt64)
		case column.FieldName:
			values[i] = new(sql.NullString)
		case column.FieldCreatedAt, column.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case column.ForeignKeys[0]: // newspaper_columns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Column fields.
func (c *Column) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case column.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case column.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case column.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case column.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case column.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field newspaper_columns", value)
			} else if value.Valid {
				c.newspaper_columns = new(int)
				*c.newspaper_columns = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Column.
// This includes values selected through modifiers, order, etc.
func (c *Column) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryNewspaper queries the "newspaper" edge of the Column entity.
func (c *Column) QueryNewspaper() *NewspaperQuery {
	return NewColumnClient(c.config).QueryNewspaper(c)
}

// QueryArticles queries the "articles" edge of the Column entity.
func (c *Column) QueryArticles() *ArticleQuery {
	return NewColumnClient(c.config).QueryArticles(c)
}

// Update returns a builder for updating this Column.
// Note that you need to call Column.Unwrap() before calling this method if this Column
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Column) Update() *ColumnUpdateOne {
	return NewColumnClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Column entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Column) Unwrap() *Column {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Column is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Column) String() string {
	var builder strings.Builder
	builder.WriteString("Column(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Columns is a parsable slice of Column.
type Columns []*Column

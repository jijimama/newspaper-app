// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jijimama/newspaper-app/ent/article"
	"github.com/jijimama/newspaper-app/ent/column"
	"github.com/jijimama/newspaper-app/ent/newspaper"
	"github.com/jijimama/newspaper-app/ent/predicate"
)

// ColumnUpdate is the builder for updating Column entities.
type ColumnUpdate struct {
	config
	hooks    []Hook
	mutation *ColumnMutation
}

// Where appends a list predicates to the ColumnUpdate builder.
func (cu *ColumnUpdate) Where(ps ...predicate.Column) *ColumnUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ColumnUpdate) SetName(s string) *ColumnUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ColumnUpdate) SetNillableName(s *string) *ColumnUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ColumnUpdate) SetCreatedAt(t time.Time) *ColumnUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ColumnUpdate) SetNillableCreatedAt(t *time.Time) *ColumnUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ColumnUpdate) SetUpdatedAt(t time.Time) *ColumnUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNewspaperID sets the "newspaper" edge to the Newspaper entity by ID.
func (cu *ColumnUpdate) SetNewspaperID(id int) *ColumnUpdate {
	cu.mutation.SetNewspaperID(id)
	return cu
}

// SetNillableNewspaperID sets the "newspaper" edge to the Newspaper entity by ID if the given value is not nil.
func (cu *ColumnUpdate) SetNillableNewspaperID(id *int) *ColumnUpdate {
	if id != nil {
		cu = cu.SetNewspaperID(*id)
	}
	return cu
}

// SetNewspaper sets the "newspaper" edge to the Newspaper entity.
func (cu *ColumnUpdate) SetNewspaper(n *Newspaper) *ColumnUpdate {
	return cu.SetNewspaperID(n.ID)
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (cu *ColumnUpdate) AddArticleIDs(ids ...int) *ColumnUpdate {
	cu.mutation.AddArticleIDs(ids...)
	return cu
}

// AddArticles adds the "articles" edges to the Article entity.
func (cu *ColumnUpdate) AddArticles(a ...*Article) *ColumnUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddArticleIDs(ids...)
}

// Mutation returns the ColumnMutation object of the builder.
func (cu *ColumnUpdate) Mutation() *ColumnMutation {
	return cu.mutation
}

// ClearNewspaper clears the "newspaper" edge to the Newspaper entity.
func (cu *ColumnUpdate) ClearNewspaper() *ColumnUpdate {
	cu.mutation.ClearNewspaper()
	return cu
}

// ClearArticles clears all "articles" edges to the Article entity.
func (cu *ColumnUpdate) ClearArticles() *ColumnUpdate {
	cu.mutation.ClearArticles()
	return cu
}

// RemoveArticleIDs removes the "articles" edge to Article entities by IDs.
func (cu *ColumnUpdate) RemoveArticleIDs(ids ...int) *ColumnUpdate {
	cu.mutation.RemoveArticleIDs(ids...)
	return cu
}

// RemoveArticles removes "articles" edges to Article entities.
func (cu *ColumnUpdate) RemoveArticles(a ...*Article) *ColumnUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveArticleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ColumnUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ColumnUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ColumnUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ColumnUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ColumnUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := column.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ColumnUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := column.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Column.name": %w`, err)}
		}
	}
	return nil
}

func (cu *ColumnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(column.Table, column.Columns, sqlgraph.NewFieldSpec(column.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(column.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(column.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(column.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.NewspaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   column.NewspaperTable,
			Columns: []string{column.NewspaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newspaper.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NewspaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   column.NewspaperTable,
			Columns: []string{column.NewspaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newspaper.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedArticlesIDs(); len(nodes) > 0 && !cu.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{column.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ColumnUpdateOne is the builder for updating a single Column entity.
type ColumnUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ColumnMutation
}

// SetName sets the "name" field.
func (cuo *ColumnUpdateOne) SetName(s string) *ColumnUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ColumnUpdateOne) SetNillableName(s *string) *ColumnUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ColumnUpdateOne) SetCreatedAt(t time.Time) *ColumnUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ColumnUpdateOne) SetNillableCreatedAt(t *time.Time) *ColumnUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ColumnUpdateOne) SetUpdatedAt(t time.Time) *ColumnUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNewspaperID sets the "newspaper" edge to the Newspaper entity by ID.
func (cuo *ColumnUpdateOne) SetNewspaperID(id int) *ColumnUpdateOne {
	cuo.mutation.SetNewspaperID(id)
	return cuo
}

// SetNillableNewspaperID sets the "newspaper" edge to the Newspaper entity by ID if the given value is not nil.
func (cuo *ColumnUpdateOne) SetNillableNewspaperID(id *int) *ColumnUpdateOne {
	if id != nil {
		cuo = cuo.SetNewspaperID(*id)
	}
	return cuo
}

// SetNewspaper sets the "newspaper" edge to the Newspaper entity.
func (cuo *ColumnUpdateOne) SetNewspaper(n *Newspaper) *ColumnUpdateOne {
	return cuo.SetNewspaperID(n.ID)
}

// AddArticleIDs adds the "articles" edge to the Article entity by IDs.
func (cuo *ColumnUpdateOne) AddArticleIDs(ids ...int) *ColumnUpdateOne {
	cuo.mutation.AddArticleIDs(ids...)
	return cuo
}

// AddArticles adds the "articles" edges to the Article entity.
func (cuo *ColumnUpdateOne) AddArticles(a ...*Article) *ColumnUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddArticleIDs(ids...)
}

// Mutation returns the ColumnMutation object of the builder.
func (cuo *ColumnUpdateOne) Mutation() *ColumnMutation {
	return cuo.mutation
}

// ClearNewspaper clears the "newspaper" edge to the Newspaper entity.
func (cuo *ColumnUpdateOne) ClearNewspaper() *ColumnUpdateOne {
	cuo.mutation.ClearNewspaper()
	return cuo
}

// ClearArticles clears all "articles" edges to the Article entity.
func (cuo *ColumnUpdateOne) ClearArticles() *ColumnUpdateOne {
	cuo.mutation.ClearArticles()
	return cuo
}

// RemoveArticleIDs removes the "articles" edge to Article entities by IDs.
func (cuo *ColumnUpdateOne) RemoveArticleIDs(ids ...int) *ColumnUpdateOne {
	cuo.mutation.RemoveArticleIDs(ids...)
	return cuo
}

// RemoveArticles removes "articles" edges to Article entities.
func (cuo *ColumnUpdateOne) RemoveArticles(a ...*Article) *ColumnUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveArticleIDs(ids...)
}

// Where appends a list predicates to the ColumnUpdate builder.
func (cuo *ColumnUpdateOne) Where(ps ...predicate.Column) *ColumnUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ColumnUpdateOne) Select(field string, fields ...string) *ColumnUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Column entity.
func (cuo *ColumnUpdateOne) Save(ctx context.Context) (*Column, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ColumnUpdateOne) SaveX(ctx context.Context) *Column {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ColumnUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ColumnUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ColumnUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := column.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ColumnUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := column.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Column.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *ColumnUpdateOne) sqlSave(ctx context.Context) (_node *Column, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(column.Table, column.Columns, sqlgraph.NewFieldSpec(column.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Column.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, column.FieldID)
		for _, f := range fields {
			if !column.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != column.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(column.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(column.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(column.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.NewspaperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   column.NewspaperTable,
			Columns: []string{column.NewspaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newspaper.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NewspaperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   column.NewspaperTable,
			Columns: []string{column.NewspaperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(newspaper.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedArticlesIDs(); len(nodes) > 0 && !cuo.mutation.ArticlesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ArticlesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   column.ArticlesTable,
			Columns: []string{column.ArticlesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Column{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{column.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

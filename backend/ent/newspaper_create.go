// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jijimama/newspaper-app/ent/column"
	"github.com/jijimama/newspaper-app/ent/newspaper"
)

// NewspaperCreate is the builder for creating a Newspaper entity.
type NewspaperCreate struct {
	config
	mutation *NewspaperMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (nc *NewspaperCreate) SetName(s string) *NewspaperCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NewspaperCreate) SetCreatedAt(t time.Time) *NewspaperCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NewspaperCreate) SetNillableCreatedAt(t *time.Time) *NewspaperCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NewspaperCreate) SetUpdatedAt(t time.Time) *NewspaperCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NewspaperCreate) SetNillableUpdatedAt(t *time.Time) *NewspaperCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// AddColumnIDs adds the "columns" edge to the Column entity by IDs.
func (nc *NewspaperCreate) AddColumnIDs(ids ...int) *NewspaperCreate {
	nc.mutation.AddColumnIDs(ids...)
	return nc
}

// AddColumns adds the "columns" edges to the Column entity.
func (nc *NewspaperCreate) AddColumns(c ...*Column) *NewspaperCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nc.AddColumnIDs(ids...)
}

// Mutation returns the NewspaperMutation object of the builder.
func (nc *NewspaperCreate) Mutation() *NewspaperMutation {
	return nc.mutation
}

// Save creates the Newspaper in the database.
func (nc *NewspaperCreate) Save(ctx context.Context) (*Newspaper, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NewspaperCreate) SaveX(ctx context.Context) *Newspaper {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NewspaperCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NewspaperCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NewspaperCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := newspaper.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := newspaper.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NewspaperCreate) check() error {
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Newspaper.name"`)}
	}
	if v, ok := nc.mutation.Name(); ok {
		if err := newspaper.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Newspaper.name": %w`, err)}
		}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Newspaper.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Newspaper.updated_at"`)}
	}
	return nil
}

func (nc *NewspaperCreate) sqlSave(ctx context.Context) (*Newspaper, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NewspaperCreate) createSpec() (*Newspaper, *sqlgraph.CreateSpec) {
	var (
		_node = &Newspaper{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(newspaper.Table, sqlgraph.NewFieldSpec(newspaper.FieldID, field.TypeInt))
	)
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(newspaper.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(newspaper.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(newspaper.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := nc.mutation.ColumnsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   newspaper.ColumnsTable,
			Columns: []string{newspaper.ColumnsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(column.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NewspaperCreateBulk is the builder for creating many Newspaper entities in bulk.
type NewspaperCreateBulk struct {
	config
	err      error
	builders []*NewspaperCreate
}

// Save creates the Newspaper entities in the database.
func (ncb *NewspaperCreateBulk) Save(ctx context.Context) ([]*Newspaper, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Newspaper, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewspaperMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NewspaperCreateBulk) SaveX(ctx context.Context) []*Newspaper {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NewspaperCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NewspaperCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
